#[gcode_macro BED_MESH_INCREMENT]
[gcode_macro START_PRINT]
description: Start print macro that prevents oozing
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    {% set EXTRUDER_TEMP_OFFSET = params.EXTRUDER_TEMP_OFFSET|default(0)|float %}
    {% set FINAL_EXTRUDER_TEMP = params.FINAL_EXTRUDER_TEMP|default((EXTRUDER_TEMP+EXTRUDER_TEMP_OFFSET))|float %}
    {% set CONF_EXTRUDE_MIN_TEMP = printer.configfile.config.extruder.min_extrude_temp|default(170)|float %}
    {% set MIN_EXTRUDE_TEMP = params.MIN_EXTRUDE_TEMP|default((FINAL_EXTRUDER_TEMP-30) if ((FINAL_EXTRUDER_TEMP-30) > CONF_EXTRUDE_MIN_TEMP) else CONF_EXTRUDE_MIN_TEMP)|float %}
    {% set RETRACT_DIST = params.RETRACT_DIST|default(70)|float %}
    {% set FINAL_RETRACT_DIST = (RETRACT_DIST+printer.toolhead.position.e)|float %}

    M140 S{BED_TEMP} ; set final bed temp
    {% if printer.extruder.temperature < 150 %} 
        M104 S150 ; set temporary nozzle temp to prevent oozing during homing and auto bed leveling...not sure if necessary
        G4 S10 ; allow partial nozzle warmup
    {% endif %}
    {% if FINAL_RETRACT_DIST > 0 %}
        {% if printer.extruder.temperature < MIN_EXTRUDE_TEMP %}
            M104 S{MIN_EXTRUDE_TEMP} ; prep nozzle for retraction to prevent oozing
            M109 S{MIN_EXTRUDE_TEMP} ; wait for nozzle to reach min extruder temp
        {% endif %}
    {% endif %}
    M104 S{FINAL_EXTRUDER_TEMP} ;set final extruder temp
    {% if FINAL_RETRACT_DIST > 0 %}
        M83 ; extruder relative mode
        G1 E-{FINAL_RETRACT_DIST} F1000 ; retract to prevent oozing
    {% endif %}
    M109 S{FINAL_EXTRUDER_TEMP} ; wait for nozzle temp to stabilize
    M190 S{BED_TEMP} ; wait for bed temp to stabilize
    G28 ; home all axis, the reason for doing this AFTER heating is to make sure the home position reflects thermal expansion
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    G1 Z50 F240
    G1 X2 Y10 F3000 E-{printer.toolhead.position.e}
    G1 Z0.28 F240
    G92 E0
    G1 Y140 E10 F1500 ; prime the nozzle
    G1 X2.3 F5000
    G92 E0
    G1 Y10 E10 F1200 ; prime the nozzle
    G92 E0

[gcode_macro START_PRINT_OLD]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(210)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    #Reset extruder
    G92 E0
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    #G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    G1 X37.1 Y20 Z0.20 F5000.0 ;Move to start position
    G1 X37.1 Y200.0 Z0.20 F1500.0 E15 ;Draw the first line
    G1 X37.4 Y200.0 Z0.20 F5000.0 ;Move to side a little
    G1 X37.4 Y20 Z0.20 F1500.0 E30 ;Draw the second line
    G92 E0 ;Reset Extruder
    G1 Z2.0 F3000 ;Move Z Axis up

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    #absolute positioning
    G90
    G1 X0 Y300
    # Disable steppers
    M84

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE



[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro wear_wheels]
description: wears in new POM wheels
gcode:
    {% set X_MIN = params.X_MIN|default(printer.toolhead.axis_minimum.x+3)|float %}
    {% set X_MAX = params.X_MAX|default(printer.toolhead.axis_maximum.x-5)|float %}
    {% set Y_MIN = params.Y_MIN|default(printer.toolhead.axis_minimum.y+3)|float %}
    {% set Y_MAX = params.Y_MAX|default(printer.toolhead.axis_maximum.y-5)|float %}
    {% set VELOCITY = params.VELOCITY|default(7800)|int %}
    {% set COUNT = params.COUNT|default(1024)|int %}
    G90
    {% for i in range(COUNT) %}
        M117 Cycle {i} of {COUNT}
        G1 X{X_MIN} Y{Y_MIN} F{VELOCITY}
        G1 X{X_MAX} Y{Y_MAX} F{VELOCITY}
    {% endfor %}
    
[gcode_macro wheel_slide]
description: tests sliding of wheels
gcode:
    {% set WHEEL_DIAMETER = params.WHEEL_DIAMETER|default(25)|float %}
    {% set VELOCITY = params.VELOCITY|default(15000)|int %}
    {% set COUNT = params.COUNT|default(1)|int %}
    {% set X_CENTER = ((printer.toolhead.axis_maximum.x - printer.toolhead.axis_minimum.x)/2)|float %}
    {% set WHEEL_CIRC = (WHEEL_DIAMETER*3.141592654)|float %}
    {% set ONE_DEG = ((WHEEL_CIRC)/360)|float %}
    G90
    G1 X{X_CENTER} F{VELOCITY}
    {% for i in range(360) %}
        {% for j in range(COUNT) %}
            G1 X{X_CENTER + (i*ONE_DEG)} F{VELOCITY}
            G1 X{X_CENTER - (i*ONE_DEG)} F{VELOCITY}
        {% endfor %}
    {% endfor %}
    G1 X{X_CENTER} F{VELOCITY}

[gcode_macro shuffle_x]
description: shuffles x axis wheels 1 degree at a time
gcode:
    {% set X_MIN = params.X_MIN|default(printer.toolhead.axis_minimum.x+3)|float %}
    {% set X_MAX = params.X_MAX|default(printer.toolhead.axis_maximum.x-5)|float %}
    {% set WHEEL_DIAMETER = params.WHEEL_DIAMETER|default(25)|float %}
    {% set VELOCITY = params.VELOCITY|default(15000)|int %}
    {% set COUNT = params.COUNT|default(1)|int %}
    {% set WHEEL_CIRC = (WHEEL_DIAMETER*3.141592654)|float %}
    {% set ONE_DEG = ((WHEEL_CIRC)/360)|float %}
    {% set NUM_STEPS = (X_MAX-X_MIN)|int %}
    G90
    G1 X{X_MIN} F{VELOCITY}
    {% for i in range(NUM_STEPS) %}
        {% for j in range(COUNT) %}
            G90
            G1 X{X_MIN + (i*(ONE_DEG*2))} F{VELOCITY}
            G91
            G1 X{-(i*ONE_DEG)}
        {% endfor %}
    {% endfor %}
    M84

[gcode_macro thermal_expansion_mesh]
description: records bed mesh at incremental temperatures
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set START_TEMP = params.START_TEMP|default(30)|float %}
    {% set END_TEMP = params.END_TEMP|default(100)|float %}
    {% set INCREMENT = params.INCREMENT|default(5)|float %}
    {% set INTERVALS = ((END_TEMP-START_TEMP)/INCREMENT)|int %}
    {% for i in range(INTERVALS) %}
        {% set TEMPERATURE = (i*INCREMENT)+START_TEMP %}
        bed_mesh_w_temp TEMPERATURE={TEMPERATURE}
    {% endfor %}

[gcode_macro bed_mesh_w_temp]
description: creates a bed mesh at a certain temperature
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set TEMP = params.TEMP|default(0)|float %}
    {% set PROBE_COUNT = params.PROBE_COUNT|default(printer.configfile.config.bed_mesh.probe_count)|default(6)|string %}
    {% set MESH_NAME = "BED_TEMP_" ~ TEMP ~ "C" %}
    {action_respond_info("probe_count: %s" % (printer.configfile.settings.bed_mesh.probe_count[0]))}
    M140 S{TEMP}
    G28
    M190 S{TEMP}
    G28
    BED_MESH_CALIBRATE PROFILE=BED_TEMP_{TEMP}C METHOD=automatic PROBE_COUNT={PROBE_COUNT}
    SAVE_CONFIG
    

    
    
[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
